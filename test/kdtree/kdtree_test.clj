(ns kdtree.kdtree-test
  (:require [clojure.test :refer :all]
            [kdtree.kdtree :as SUT]))

(deftest nn-search
  (let [tree (SUT/kd-tree [[1 1] [1 6] [8 3] [3 4] [5 5] [8 9]] 0)]
    (are [x y] (= y (SUT/nn-search tree x SUT/md))
      [0 0] [1 1]
      [1 1] [1 1]
      [1 2] [1 1]
      [1 3] [1 1]
      [1 4] [:draw
             [3 4]
             [1 6]]
      [1 5] [1 6]
      [1 6] [1 6]
      [1 7] [1 6]
      [1 8] [1 6]
      [1 9] [1 6]
      [2 1] [1 1]
      [2 2] [1 1]
      [2 3] [3 4]
      [2 4] [3 4]
      [2 5] [:draw
             [3 4]
             [1 6]]
      [2 6] [1 6]
      [2 7] [1 6]
      [2 8] [1 6]
      [2 9] [1 6]
      [3 1] [1 1]
      [3 2] [3 4]
      [3 3] [3 4]
      [3 4] [3 4]
      [3 5] [3 4]

      [3 6] [:draw
             [3 4]
             [1 6]]
      [3 7] [:draw
             [3 4]
             [1 6]]
      [3 8] [:draw
             [3 4]
             [1 6]]
      [3 9] [:draw
             [3 4]
             [1 6]]
      [4 1] [1 1]
      [4 2] [3 4]
      [4 3] [3 4]
      [4 4] [3 4]
      [4 5] [5 5]
      [4 6] [5 5]
      [4 7] [5 5]
      [4 8] [5 5]
      [4 9] [8 9]
      [5 1] [:draw
             [5 5]
             [1 1]]
      [5 2] [5 5]
      [5 3] [5 5]
      [5 4] [5 5]
      [5 5] [5 5]
      [5 6] [5 5]
      [5 7] [5 5]
      [5 8] [5 5]
      [5 9] [8 9]
      [6 1] [8 3]
      [6 2] [8 3]
      [6 3] [8 3]
      [6 4] [5 5]
      [6 5] [5 5]
      [6 6] [5 5]
      [6 7] [5 5]
      [6 8] [8 9]
      [6 9] [8 9]
      [7 1] [8 3]
      [7 2] [8 3]
      [7 3] [8 3]
      [7 4] [8 3]
      [7 5] [5 5]
      [7 6] [5 5]
      [7 7] [8 9]
      [7 8] [8 9]
      [7 9] [8 9]
      [8 1] [8 3]
      [8 2] [8 3]
      [8 3] [8 3]
      [8 4] [8 3]
      [8 5] [8 3]
      [8 6] [:draw
             [8 9]
             [8 3]]
      [8 7] [8 9]
      [8 8] [8 9]
      [8 9] [8 9])))
